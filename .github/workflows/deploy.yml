name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  LARAVEL_IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Set lowercase repository name
        id: repo_name_to_lower
        run: echo "LOWERCASE_REPO_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Build and push Laravel image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.repo_name_to_lower.outputs.LOWERCASE_REPO_NAME }}:latest
            ${{ env.REGISTRY }}/${{ steps.repo_name_to_lower.outputs.LOWERCASE_REPO_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # deploy:
  #   needs: build-and-push
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Deploy to server
  #       uses: appleboy/ssh-action@v1.0.0
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USERNAME }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         port: ${{ secrets.PORT }}
  #         script: |
  #           cd /opt/your-project

  #           # Stop services to free memory during deployment
  #           docker-compose -f docker-compose.prod.yml down

  #           # Clean up to free space
  #           docker system prune -f

  #           # Pull new images one by one to manage memory
  #           docker pull ${{ env.REGISTRY }}/${{ env.LARAVEL_IMAGE_NAME }}:latest
  #           docker pull ${{ env.REGISTRY }}/${{ env.FLUTTER_IMAGE_NAME }}:latest

  #           # Update docker-compose file with new images
  #           sed -i 's|image: .*laravel-app:.*|image: ${{ env.REGISTRY }}/${{ env.LARAVEL_IMAGE_NAME }}:latest|' docker-compose.prod.yml
  #           sed -i 's|image: .*flutter-web:.*|image: ${{ env.REGISTRY }}/${{ env.FLUTTER_IMAGE_NAME }}:latest|' docker-compose.prod.yml

  #           # Start services
  #           docker-compose -f docker-compose.prod.yml up -d

  #           # Clean up old images after successful deployment
  #           sleep 30
  #           docker image prune -f
